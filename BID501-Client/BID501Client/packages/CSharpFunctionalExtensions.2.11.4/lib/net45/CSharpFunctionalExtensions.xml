<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpFunctionalExtensions</name>
    </assembly>
    <members>
        <member name="M:CSharpFunctionalExtensions.Result.Combine(System.Collections.Generic.IEnumerable{CSharpFunctionalExtensions.Result},System.String)">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.</summary>
            <param name="results">
                The Results to be combined.</param>
            <param name="errorMessagesSeparator">
                A string that is used to separate any concatenated error messages. If omitted, the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> is used.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``1(System.Collections.Generic.IEnumerable{CSharpFunctionalExtensions.Result{``0}},System.String)">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.</summary>
            <param name="results">
                The Results to be combined.</param>
            <param name="errorMessagesSeparator">
                A string that is used to separate any concatenated error messages. If omitted, the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> is used.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``2(System.Collections.Generic.IEnumerable{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{``1},``1})">
            <summary>
                Combines several results (and any errors) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                NB: The bool value type is arbitrary - the value is not intended to be used.</summary>
            <param name="results">
                The Results to be combined.</param>
            <param name="composerError">
                A function that combines any errors.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``2(System.Collections.Generic.IEnumerable{CSharpFunctionalExtensions.Result{``0,``1}})">
            <summary>
                Combines several results (and any errors) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                The E error class must implement ICombine to provide an accumulator function for combining any errors.
                NB: The bool value type is arbitrary - the value is not intended to be used.</summary>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine(CSharpFunctionalExtensions.Result[])">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                Error messages are concatenated with the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> between each message.</summary>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``1(CSharpFunctionalExtensions.Result{``0}[])">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                Error messages are concatenated with the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> between each message.</summary>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``2(CSharpFunctionalExtensions.Result{``0,``1}[])">
            <summary>
                Combines several results (and any errors) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                The E error class must implement ICombine to provide an accumulator function for combining any errors.
                NB: The bool value type is arbitrary - the result Value is not intended to be used.</summary>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine(System.String,CSharpFunctionalExtensions.Result[])">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.</summary>
            <param name="errorMessagesSeparator">
                A string that is used to separate any concatenated error messages. If omitted, the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> is used.</param>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``1(System.String,CSharpFunctionalExtensions.Result{``0}[])">
            <summary>
                Combines several results (and any error messages) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.</summary>
            <param name="errorMessagesSeparator">
                A string that is used to separate any concatenated error messages. If omitted, the default <see cref="F:CSharpFunctionalExtensions.Result.ErrorMessagesSeparator" /> is used.</param>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Combine``2(System.Func{System.Collections.Generic.IEnumerable{``1},``1},CSharpFunctionalExtensions.Result{``0,``1}[])">
            <summary>
                Combines several results (and any errors) into a single result.
                The returned result will be a failure if any of the input <paramref name="results"/> are failures.
                NB: The bool value type is arbitrary - the result Value is not intended to be used.</summary>
            <param name="composerError">
                A function that combines any errors.</param>
            <param name="results">
                The Results to be combined.</param>
            <returns>
                A Result that is a success when all the input <paramref name="results"/> are also successes.</returns>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.ConvertFailure``1">
            <summary>
                Throws if the result is a success. Else returns a new failure result of the given type.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Failure(System.String)">
            <summary>
                Creates a failure result with the given error message.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Failure``1(System.String)">
            <summary>
                Creates a failure result with the given error message.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Failure``2(``1)">
            <summary>
                Creates a failure result with the given error.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf(System.Boolean,System.String)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf(System.Func{System.Boolean},System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``1(System.Boolean,``0,System.String)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``1(System.Func{System.Boolean},``0,System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``1(System.Func{System.Threading.Tasks.Task{System.Boolean}},``0,System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``2(System.Boolean,``0,``1)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``2(System.Func{System.Boolean},``0,``1)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FailureIf``2(System.Func{System.Threading.Tasks.Task{System.Boolean}},``0,``1)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of SuccessIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.FirstFailureOrSuccess(CSharpFunctionalExtensions.Result[])">
            <summary>
                Returns the first failure from the supplied <paramref name="results"/>.
                If there is no failure, a success result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Success">
            <summary>
                Creates a success result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Success``1(``0)">
            <summary>
                Creates a success result containing the given value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Success``2(``0)">
            <summary>
                Creates a success result containing the given value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf(System.Boolean,System.String)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf(System.Func{System.Boolean},System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``1(System.Boolean,``0,System.String)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``1(System.Func{System.Boolean},``0,System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``1(System.Func{System.Threading.Tasks.Task{System.Boolean}},``0,System.String)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``2(System.Boolean,``0,``1)">
            <summary>
                Creates a result whose success/failure reflects the supplied condition. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``2(System.Func{System.Boolean},``0,``1)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.SuccessIf``2(System.Func{System.Threading.Tasks.Task{System.Boolean}},``0,``1)">
            <summary>
                Creates a result whose success/failure depends on the supplied predicate. Opposite of FailureIf().
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try(System.Action,System.Func{System.Exception,System.String})">
            <summary>
                Attempts to execute the supplied action. Returns a Result indicating whether the action executed successfully.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try(System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.String})">
            <summary>
                Attempts to execute the supplied action. Returns a Result indicating whether the action executed successfully.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try``1(System.Func{``0},System.Func{System.Exception,System.String})">
            <summary>
                Attempts to execute the supplied function. Returns a Result indicating whether the function executed successfully.
                If the function executed successfully, the result contains its return value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Exception,System.String})">
            <summary>
                Attempts to execute the supplied function. Returns a Result indicating whether the function executed successfully.
                If the function executed successfully, the result contains its return value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try``2(System.Func{``0},System.Func{System.Exception,``1})">
            <summary>
                Attempts to execute the supplied function. Returns a Result indicating whether the function executed successfully.
                If the function executed successfully, the result contains its return value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result.Try``2(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Exception,``1})">
            <summary>
                Attempts to execute the supplied function. Returns a Result indicating whether the function executed successfully.
                If the function executed successfully, the result contains its return value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Bind``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Bind``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,CSharpFunctionalExtensions.Result{``1}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Bind``1(CSharpFunctionalExtensions.Result,System.Func{CSharpFunctionalExtensions.Result{``0}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Bind``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,CSharpFunctionalExtensions.Result})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Bind(CSharpFunctionalExtensions.Result,System.Func{CSharpFunctionalExtensions.Result})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Ensure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Boolean},``1)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Ensure``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Ensure(CSharpFunctionalExtensions.Result,System.Func{System.Boolean},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Finally``1(CSharpFunctionalExtensions.Result,System.Func{CSharpFunctionalExtensions.Result,``0})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Finally``2(CSharpFunctionalExtensions.Result{``0},System.Func{CSharpFunctionalExtensions.Result{``0},``1})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Finally``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{CSharpFunctionalExtensions.Result{``0,``2},``1})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Map``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,``1})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Map``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,``1})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Map``1(CSharpFunctionalExtensions.Result,System.Func{``0})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Action)">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure``1(CSharpFunctionalExtensions.Result{``0},System.Action)">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure(CSharpFunctionalExtensions.Result,System.Action)">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Action{``1})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure``1(CSharpFunctionalExtensions.Result{``0},System.Action{System.String})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.OnFailure(CSharpFunctionalExtensions.Result,System.Action{System.String})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``3(CSharpFunctionalExtensions.Result{``0},System.Func{``0,CSharpFunctionalExtensions.Result{``1}},System.Func{``0,``1,``2})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``4(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}},System.Func{``0,``1,``3})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}},System.Func{``0,``1,``2})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``4(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}},System.Func{``0,``1,``3})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,CSharpFunctionalExtensions.Result{``1}},System.Func{``0,``1,``2})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``4(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}},System.Func{``0,``1,``3})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``3(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}},System.Func{``0,``1,``2})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.SelectMany``4(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}},System.Func{``0,``1,``3})">
            <summary>
                This method should be used in linq queries. We recommend using Bind method.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap(CSharpFunctionalExtensions.Result,System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``2(CSharpFunctionalExtensions.Result{``0,``1},System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``2(CSharpFunctionalExtensions.Result{``0,``1},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,CSharpFunctionalExtensions.Result})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,CSharpFunctionalExtensions.Result{``1}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.Tap``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf(CSharpFunctionalExtensions.Result,System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Boolean,System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Boolean,System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Boolean},System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Boolean},System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.ResultExtensions.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Bind``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Bind``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Bind``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Bind``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Bind(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Ensure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Ensure``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},``1)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Ensure(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Finally``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{CSharpFunctionalExtensions.Result,System.Threading.Tasks.Task{``0}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Finally``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{CSharpFunctionalExtensions.Result{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Finally``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{CSharpFunctionalExtensions.Result{``0,``2},System.Threading.Tasks.Task{``1}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Map``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Map``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Map``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.OnFailure``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.OnFailure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.OnFailure(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.OnFailure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.OnFailure``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``1,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.Tap``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Boolean,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Boolean,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Boolean},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Boolean},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Boolean},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Boolean},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Bind``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Bind``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,CSharpFunctionalExtensions.Result{``1}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Bind``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{CSharpFunctionalExtensions.Result{``0}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Bind``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,CSharpFunctionalExtensions.Result})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Bind(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{CSharpFunctionalExtensions.Result})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Ensure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Ensure``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Boolean},``1)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Ensure(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{System.Boolean},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Finally``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{CSharpFunctionalExtensions.Result,``0})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Finally``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{CSharpFunctionalExtensions.Result{``0},``1})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Finally``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{CSharpFunctionalExtensions.Result{``0,``2},``1})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Map``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,``1})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Map``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,``1})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Map``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Func{``0})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.OnFailure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Action)">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.OnFailure(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Action)">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.OnFailure``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Action{System.String})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.OnFailure``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Action{``1})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.OnFailure(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Action{System.String})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Action)">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,CSharpFunctionalExtensions.Result})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,CSharpFunctionalExtensions.Result{``1}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.Tap``3(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``2}},System.Func{``0,CSharpFunctionalExtensions.Result{``1,``2}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result},System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Boolean,System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Boolean,System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Boolean,System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Boolean},System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``1(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Boolean},System.Action)">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand.TapIf``2(System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0,``1}},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Bind``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Bind``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Bind``1(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``0}}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Bind``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Bind(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Ensure``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Ensure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},``1)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Ensure(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
                Returns a new failure result if the predicate is false. Otherwise returns the starting result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Finally``1(CSharpFunctionalExtensions.Result,System.Func{CSharpFunctionalExtensions.Result,System.Threading.Tasks.Task{``0}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Finally``2(CSharpFunctionalExtensions.Result{``0},System.Func{CSharpFunctionalExtensions.Result{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Finally``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{CSharpFunctionalExtensions.Result{``0,``2},System.Threading.Tasks.Task{``1}})">
            <summary>
                Passes the result to the given function (regardless of success/failure state) to yield a final output value.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Map``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Map``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Map``1(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Creates a new result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.OnFailure``1(CSharpFunctionalExtensions.Result{``0},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.OnFailure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.OnFailure(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.OnFailure``1(CSharpFunctionalExtensions.Result{``0},System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.OnFailure``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``1,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a failure. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap(CSharpFunctionalExtensions.Result,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``2(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1}}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.Tap``3(CSharpFunctionalExtensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{CSharpFunctionalExtensions.Result{``1,``2}}})">
            <summary>
                If the calling result is a success, the given function is executed and its Result is checked. If this Result is a failure, it is returned. Otherwise, the calling result is returned.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf(CSharpFunctionalExtensions.Result,System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Boolean,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Boolean,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Boolean,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Boolean},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``1(CSharpFunctionalExtensions.Result{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Boolean},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand.TapIf``2(CSharpFunctionalExtensions.Result{``0,``1},System.Func{``0,System.Boolean},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the given action if the calling result is a success and condition is true. Returns the calling result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result`1.ConvertFailure">
            <summary>
                Throws if the result is a success. Else returns a new failure result.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result`1.ConvertFailure``1">
            <summary>
                Throws if the result is a success. Else returns a new failure result of the given type.
            </summary>
        </member>
        <member name="M:CSharpFunctionalExtensions.Result`2.ConvertFailure``1">
            <summary>
                Throws if the result is a success. Else returns a new failure result of the given type.
            </summary>
        </member>
        <member name="T:CSharpFunctionalExtensions.ValueObject`1">
            <summary>
            Use non-generic ValueObject whenever possible: http://bit.ly/vo-new
            </summary>
        </member>
    </members>
</doc>
